name: CI/CD with Amazon ECR/ECS

on:
  push:
    branches:
      # - main
      # - develop
      - '**'

jobs:

  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Tests and Build Application JAR
      run: mvn clean install
    
  deploy:
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build Application JAR
      run: mvn clean install -DskipTests

    - name: Build Docker Compose
      run: docker-compose build

    - name: Docker Hub Login
      uses: docker/login-action@v2.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub
      run: |
        docker tag ${{ secrets.DOCKER_USERNAME }}/curso-udemy-spring-boot-aws:latest ${{ secrets.DOCKER_USERNAME }}/curso-udemy-spring-boot-aws:${{ github.run_id }}
        docker push ${{ secrets.DOCKER_USERNAME }}/curso-udemy-spring-boot-aws:${{ github.run_id }}
        docker push ${{ secrets.DOCKER_USERNAME }}/curso-udemy-spring-boot-aws:latest

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      
    # - name: Login to Amazon ECR Private
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Tag, and push docker image to Amazon ECR
    #   run: |
    #     docker tag ${{ secrets.DOCKER_USERNAME }}/curso-udemy-spring-boot-aws:latest ${{ secrets.AWS_IMAGE_REPO_URL }}:${{ github.run_id }}
    #     docker tag ${{ secrets.DOCKER_USERNAME }}/curso-udemy-spring-boot-aws:latest ${{ secrets.AWS_IMAGE_REPO_URL }}:latest
    #     docker push ${{ secrets.AWS_IMAGE_REPO_URL }}:${{ github.run_id }}
    #     docker push ${{ secrets.AWS_IMAGE_REPO_URL }}:latest
      
    # - name: Download task definition
    #   run: |
    #     aws ecs describe-task-definition --task-definition ${{ secrets.AWS_TASK_NAME }} --query taskDefinition > task-definition.json
    
    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     container-name: ${{ secrets.AWS_CONTAINER_NAME }}
    #     image: ${{ secrets.AWS_IMAGE_REPO_URL }}:latest

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ secrets.AWS_SERVICE_NAME }}
    #     cluster: ${{ secrets.AWS_CLUSTER_NAME }}
    #     wait-for-service-stability: true